#+title: Emacs Literate Config (Minimal)
#+property: header-args:emacs-lisp :tangle init.el :results none :noweb yes
#+startup: overview

* UI
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package nerd-icons)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :init
    ;; avoid mixed faces if another theme was active
    (mapc #'disable-theme custom-enabled-themes)
    ;; load without confirmation
    (load-theme 'gruvbox-dark-hard t))
#+end_src
** Stock UI deletion
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
  )
  (global-display-line-numbers-mode -1)
  (column-number-mode 1)
#+end_src
** Font
#+begin_src emacs-lisp
  (defun my/set-font () 
    "Set the default font."
    (set-face-attribute 'default nil
                        :family "Maple Mono NF CN"
                        :height 150  ; 18pt = 180 in Emacs units
                        :weight 'regular))
  
  ;; Set font if running in GUI
  (if (display-graphic-p)
      (my/set-font)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (when (display-graphic-p frame)
                  (my/set-font)))))
#+end_src
** Dashboard
#+begin_src emacs-lisp
    ;; Dashboard (from Nix, so :ensure nil is fine too)
  ;; use-package with package.el:
  (use-package dashboard
    :ensure t
    :config
    (setq
     dashboard-center-content t
     dashboard-vertically-center-content t
     )
    (dashboard-setup-startup-hook))
#+end_src
** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Vertico posframe
#+begin_src emacs-lisp
  ;; Vertico posframe (GUI only)
(use-package vertico-posframe
  :after vertico
  :if (display-graphic-p)
  :hook (vertico-mode . vertico-posframe-mode)
  :custom
  (vertico-posframe-poshandler #'posframe-poshandler-frame-center)
  (vertico-posframe-parameters '((left-fringe . 4) (right-fringe . 4) (internal-border-width . 1))))
#+end_src
* ORG
** UI
#+begin_src emacs-lisp
  (use-package org-modern)

  (with-eval-after-load 'org (global-org-modern-mode))

  (setq
    org-auto-align-tags nil
    org-tags-column 0
    org-catch-invisible-edits 'show-and-error
    org-special-ctrl-a/e t
    org-insert-heading-respect-content t
    org-hide-emphasis-markers t 
    org-indent-indentation-per-level 2
   
    org-modern-fold-stars '(("󰜵" . "󱥧"))
    org-modern-star 'fold
    org-ellipsis "…"
  )

  (global-org-modern-mode)
#+end_src
*** Variable size heading
#+begin_src emacs-lisp
  ;; Set variable font sizes for Org headings
(set-face-attribute 'org-level-1 nil :height 1.5)
(set-face-attribute 'org-level-2 nil :height 1.35)
(set-face-attribute 'org-level-3 nil :height 1.2)
(set-face-attribute 'org-level-4 nil :height 1.1)
(set-face-attribute 'org-level-5 nil :height 1.0)
(set-face-attribute 'org-level-6 nil :height 0.9)
(set-face-attribute 'org-level-7 nil :height 0.8)
(set-face-attribute 'org-level-8 nil :height 0.7)
#+end_src
** Org mode
#+begin_src emacs-lisp
  (use-package org
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link))
  :config
  (setq
   org-startup-with-inline-images t
   org-use-fast-todo-selection t
   org-todo-keywords
      '((sequence "TODO(t)" "CALL(l)" "MEETING(m)" "TEST(e)" "HOMEWORK(h)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)"))
        org-todo-keyword-faces
      '(("TODO" . (:background "#458588" :foreground "#fbf1c7" :weight bold))
        ("CALL" . (:background "#689d6a" :foreground "#fbf1c7" :weight bold))
        ("MEETING" . (:background "#d65d0e" :foreground "#fbf1c7" :weight bold))
        ("TEST" . (:background "#cc241d" :foreground "#fbf1c7" :weight bold))
        ("HOMEWORK" . (:background "#b16286" :foreground "#fbf1c7" :weight bold))
        ("PROJECT" . (:background "#d79921" :foreground "#fbf1c7" :weight bold))
        ("DONE" . (:background "#98971a" :foreground "#282828" :weight bold))
        ("CANCELLED" . (:background "#3c3836" :foreground "#928374" :weight bold :strike-through t))))
  )
#+end_src
*** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (directory-files-recursively "~/ORG/Roam/" "\\.org$"))
#+end_src
** Org Roam
*** Setup 
#+begin_src emacs-lisp
  (use-package org-roam
  :init
  (setq org-roam-directory (file-truename "~/ORG/Roam/")
        org-roam-dailies-directory "journal/"
        org-roam-completion-everywhere t)
  ;; Keep the top-level roam key bindings and expose the dailies keymap
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ;; expose the dailies keymap on prefix C-c n d
         :map org-roam-dailies-map
         ;; make sure the prefix is available as a keymap (see :bind-keymap fallback below)
         ;; (bindings for dailies are defined in :config)
         )
  :bind-keymap ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))

  (setq org-roam-capture-templates
      (list '("d" "default" plain "%?"
              :target (file+head "${slug}.org" "#+title: ${title}")
              :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
      (list '("d" "default" entry "* %<%H:%M>: %?"
              :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>"))))
#+end_src
*** Roam UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
  :if (locate-library "org-roam-ui")   ;; guard if not in packages.nix
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src

* Completion
#+begin_src emacs-lisp
(use-package vertico :init (vertico-mode 1))
(use-package orderless
  :custom (completion-styles '(orderless basic))
          (completion-category-defaults nil)
          (completion-category-overrides '((file (styles partial-completion)))))
(use-package marginalia :init (marginalia-mode 1))
#+end_src
* System
** Init
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000
      read-process-output-max (* 3 1024 1024))
#+end_src
** Garbae collection
#+begin_src emacs-lisp
  ;; GCMH (smoother GC) — installed via Nix
(use-package gcmh
  :hook (after-init . gcmh-mode)
  :custom (gcmh-idle-delay 0.5)
  :config (setq gcmh-high-cons-threshold (* 64 1024 1024)))
#+end_src
** Packages
#+begin_src emacs-lisp
    (require 'package)
    (setq package-archives
          '(("gnu"   . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
  	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
    (setq use-package-always-ensure t)
#+end_src

** Emacs literary config
#+begin_src emacs-lisp
;; Hot-reload literate config (absolute paths, no surprises)
(defvar my/lit-org-file
  (expand-file-name "~/System-configuration/home/navi/programs/emacs/config.org"))

(defvar my/tangled-el (expand-file-name "~/.emacs.d/config.el"))

(defun my/reload-config ()
  "Tangle `my/lit-org-file` into ~/.emacs.d/config.el and load it."
  (interactive)
  (require 'org) (require 'ob-tangle)
  (let ((org-confirm-babel-evaluate nil))
    ;; ensure dir exists
    (unless (file-directory-p (file-name-directory my/tangled-el))
      (make-directory (file-name-directory my/tangled-el) t))
    ;; tangle only emacs-lisp blocks into the exact file we want
    (org-babel-tangle-file my/lit-org-file my/tangled-el "emacs-lisp"))
  (if (file-exists-p my/tangled-el)
      (progn (load my/tangled-el nil 'nomessage)
             (message "Reloaded %s" my/tangled-el))
    (user-error "Tangle failed; %s not found" my/tangled-el)))

(global-set-key (kbd "C-c r") #'my/reload-config)

#+end_src 

|-                     |                        |

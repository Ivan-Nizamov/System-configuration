#+title: Emacs Literate Config (Minimal)
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/config.el :results none :noweb yes
#+startup: overview

* UI
** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :init
    ;; avoid mixed faces if another theme was active
    (mapc #'disable-theme custom-enabled-themes)
    ;; load without confirmation
    (load-theme 'gruvbox-dark-hard t))
#+end_src
** Stock UI deletion
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      global-display-line-numbers-mode nil)
  (column-number-mode 1)
#+end_src
** Font
#+begin_src emacs-lisp
  (defun my/set-font () 
    "Set the default font."
    (set-face-attribute 'default nil
                        :family "Maple Mono NF CN"
                        :height 180  ; 18pt = 180 in Emacs units
                        :weight 'regular))
  
  ;; Set font if running in GUI
  (if (display-graphic-p)
      (my/set-font)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (when (display-graphic-p frame)
                  (my/set-font)))))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  ;; Dashboard (from Nix, so :ensure nil is fine too)
(use-package dashboard
  :demand t
  :init
  (setq dashboard-startup-banner 'official
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-items '((recents . 8) (projects . 5) (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook)
  ;; Open it once Emacs is ready (buffer definitely exists by then)
  (add-hook 'emacs-startup-hook #'dashboard-open))
#+end_src
* Completion 
#+begin_src emacs-lisp
(use-package vertico :init (vertico-mode 1))
(use-package orderless
  :custom (completion-styles '(orderless basic))
          (completion-category-defaults nil)
          (completion-category-overrides '((file (styles partial-completion)))))
(use-package marginalia :init (marginalia-mode 1))
#+end_src

* Org/Roam
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-hide-leading-stars t
          org-ellipsis " â–¾"))
  
#+end_src

* System
** Init
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000
      read-process-output-max (* 3 1024 1024))
#+end_src

** Packages
#+begin_src emacs-lisp
    (require 'package)
    (setq package-archives
          '(("gnu"   . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
  	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
    (setq use-package-always-ensure t)
#+end_src

** Emacs literary config
#+begin_src emacs-lisp
;; Hot-reload literate config (absolute paths, no surprises)
(defvar my/lit-org-file
  (expand-file-name "~/System-configuration/home/navi/programs/emacs/config/emacsV2/config.org"))

(defvar my/tangled-el (expand-file-name "~/.emacs.d/config.el"))

(defun my/reload-config ()
  "Tangle `my/lit-org-file` into ~/.emacs.d/config.el and load it."
  (interactive)
  (require 'org) (require 'ob-tangle)
  (let ((org-confirm-babel-evaluate nil))
    ;; ensure dir exists
    (unless (file-directory-p (file-name-directory my/tangled-el))
      (make-directory (file-name-directory my/tangled-el) t))
    ;; tangle only emacs-lisp blocks into the exact file we want
    (org-babel-tangle-file my/lit-org-file my/tangled-el "emacs-lisp"))
  (if (file-exists-p my/tangled-el)
      (progn (load my/tangled-el nil 'nomessage)
             (message "Reloaded %s" my/tangled-el))
    (user-error "Tangle failed; %s not found" my/tangled-el)))

(global-set-key (kbd "C-c r") #'my/reload-config)

#+end_src 


{ config, pkgs, lib, ... }:

let
  # <-- EDIT THIS: absolute path to your literate source -->
  litOrg = "${config.home.homeDirectory}/System-configuration/home/navi/programs/emacs/config.org";

  # Minimal init.el generated by Nix.
  initEl = ''
    ;;; init.el --- generated by Nix  -*- lexical-binding: t; -*-
    (defconst my/tangled-el (expand-file-name "config.el" user-emacs-directory))
    ;; Fast path: load if already tangled by Home-Manager activation
    (when (file-exists-p my/tangled-el)
      (load my/tangled-el nil 'nomessage))

    ;; Fallback (first ever launch or manual run): tangle from the external Org.
    (unless (featurep 'org) (require 'org))
    (unless (featurep 'ob-tangle) (require 'ob-tangle))
    (let ((org-confirm-babel-evaluate nil))
      (when (and (file-exists-p ${lib.escapeShellArg "\"${litOrg}\""})
                 (not (file-exists-p my/tangled-el)))
        (org-babel-tangle-file ${lib.escapeShellArg "\"${litOrg}\""} my/tangled-el)
        (load my/tangled-el nil 'nomessage)))
  '';
in
{
  # Ensure Emacs binary is available during activation tangling.
  home.packages = [ pkgs.emacs ];

  # Create ~/.emacs.d/init.el from Nix:
  home.file.".emacs.d/init.el".text = initEl;

  # (Optional but recommended) Make sure ~/.emacs.d exists with sane perms:
  home.file.".emacs.d/.keep".text = "";  # forces directory creation

  # Activation step: tangle config.el from your config.org on each HM switch.
  home.activation.tangleEmacsConfig =
    lib.hm.dag.entryAfter [ "writeBoundary" ] ''
      if [ -f ${lib.escapeShellArg litOrg} ]; then
        ${pkgs.emacs}/bin/emacs --batch \
          --eval "(require 'org)" \
          --eval "(require 'ob-tangle)" \
          --eval '(org-babel-tangle-file
                    ${lib.escapeShellArg (builtins.toJSON litOrg)}
                    (expand-file-name "config.el" "~/.emacs.d/"))'
      else
        echo "WARN: Literate Org not found at ${litOrg}; skipping tangle." >&2
      fi
    '';
}

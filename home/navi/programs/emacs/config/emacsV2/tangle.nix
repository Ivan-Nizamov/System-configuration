{ config, pkgs, lib, ... }:

let
  # Путь к literate-файлу (редактируйте под себя)
  # NOTE: config.org находится в поддиректории emacsV2 в текущей структуре
  litOrg = "${config.home.homeDirectory}/System-configuration/home/navi/programs/emacs/emacsV2/config.org";

  initEl = ''
    ;;; init.el --- generated by Nix  -*- lexical-binding: t; -*-

    (defconst my/lit-org-file "${litOrg}")
    (defconst my/tangled-el (expand-file-name "config.el" user-emacs-directory))

    ;; Если config.el уже есть (после активации HM) — просто грузим
    (when (file-exists-p my/tangled-el)
      (load my/tangled-el nil 'nomessage))

    ;; Иначе: первый запуск — протянглить из внешнего Org и загрузить
    (unless (file-exists-p my/tangled-el)
      (require 'org) (require 'ob-tangle)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle-file my/lit-org-file my/tangled-el)
        (load my/tangled-el nil 'nomessage)))
  '';
in
{
  home.packages = [ pkgs.emacs ];

  # Генерируем init.el
  home.file.".emacs.d/init.el".text = initEl;

  # Гарантируем существование директории
  home.file.".emacs.d/.keep".text = "";

  # На каждом `home-manager switch` тэнглим config.el в ~/.emacs.d/
  home.activation.tangleEmacsConfig =
    lib.hm.dag.entryAfter [ "writeBoundary" ] ''
      if [ -f "${litOrg}" ]; then
        ${pkgs.emacs}/bin/emacs --batch \
          --eval "(require 'org)" \
          --eval "(require 'ob-tangle)" \
          --eval '(org-babel-tangle-file
                    "${litOrg}"
                    (expand-file-name "config.el" "~/.emacs.d/"))'
      else
        echo "WARN: Literate Org not found at ${litOrg}; skipping tangle." >&2
      fi
    '';
}
